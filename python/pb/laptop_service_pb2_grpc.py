# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import laptop_service_pb2 as laptop__service__pb2


class LaptopServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/rpc.LaptopService/Create',
                request_serializer=laptop__service__pb2.CreateLaptopRequest.SerializeToString,
                response_deserializer=laptop__service__pb2.CreateLaptopResponse.FromString,
                )
        self.SearchLaptop = channel.unary_stream(
                '/rpc.LaptopService/SearchLaptop',
                request_serializer=laptop__service__pb2.SearchLaptopRequest.SerializeToString,
                response_deserializer=laptop__service__pb2.SearchLaptopResponse.FromString,
                )
        self.UploadImage = channel.stream_unary(
                '/rpc.LaptopService/UploadImage',
                request_serializer=laptop__service__pb2.UploadImageRequest.SerializeToString,
                response_deserializer=laptop__service__pb2.UploadImageResponse.FromString,
                )
        self.RateLaptop = channel.stream_stream(
                '/rpc.LaptopService/RateLaptop',
                request_serializer=laptop__service__pb2.RateLaptopRequest.SerializeToString,
                response_deserializer=laptop__service__pb2.RateLaptopResponse.FromString,
                )


class LaptopServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchLaptop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RateLaptop(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LaptopServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=laptop__service__pb2.CreateLaptopRequest.FromString,
                    response_serializer=laptop__service__pb2.CreateLaptopResponse.SerializeToString,
            ),
            'SearchLaptop': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchLaptop,
                    request_deserializer=laptop__service__pb2.SearchLaptopRequest.FromString,
                    response_serializer=laptop__service__pb2.SearchLaptopResponse.SerializeToString,
            ),
            'UploadImage': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadImage,
                    request_deserializer=laptop__service__pb2.UploadImageRequest.FromString,
                    response_serializer=laptop__service__pb2.UploadImageResponse.SerializeToString,
            ),
            'RateLaptop': grpc.stream_stream_rpc_method_handler(
                    servicer.RateLaptop,
                    request_deserializer=laptop__service__pb2.RateLaptopRequest.FromString,
                    response_serializer=laptop__service__pb2.RateLaptopResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.LaptopService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LaptopService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.LaptopService/Create',
            laptop__service__pb2.CreateLaptopRequest.SerializeToString,
            laptop__service__pb2.CreateLaptopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchLaptop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rpc.LaptopService/SearchLaptop',
            laptop__service__pb2.SearchLaptopRequest.SerializeToString,
            laptop__service__pb2.SearchLaptopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/rpc.LaptopService/UploadImage',
            laptop__service__pb2.UploadImageRequest.SerializeToString,
            laptop__service__pb2.UploadImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RateLaptop(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/rpc.LaptopService/RateLaptop',
            laptop__service__pb2.RateLaptopRequest.SerializeToString,
            laptop__service__pb2.RateLaptopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
